// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model untuk NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String?   

  createdAt      DateTime  @default(now()) 
  updatedAt      DateTime  @updatedAt     

  accounts Account[]
  sessions Session[]
  orders   Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model untuk Produk
model Product {
  id              String    @id @default(cuid())
  title           String
  description     String? 
  imagePreviews   String[]
  reviews         Int?
  price           Decimal
  discountedPrice Decimal?
  stock           Int       @default(0)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  categoryId      String?   // Field untuk menyimpan ID kategori
  category        Category? @relation(fields: [categoryId], references: [id])

  orderItems OrderItem[]
  @@index([categoryId]) // Tambahkan index untuk performa query berdasarkan kategori
  // @@index([sellerId])
}

// Model untuk Kategori Produk
model Category {
  id        String    @id @default(cuid())
  name      String    @unique // Nama kategori harus unik
  // Deskripsi kategori, jika perlu
  // description String?

  products  Product[] // Setiap kategori bisa memiliki banyak produk
}
model Order {
  id        String      @id @default(cuid())
  userId    String // Relasi ke User
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  totalAmount Decimal   // Total harga pesanan termasuk ongkir, dll.
  status    String      @default("PENDING") // Contoh status: PENDING, PAID, SHIPPED, DELIVERED, CANCELLED
  
  shippingAddress String?   // Untuk kesederhanaan, simpan sebagai string. Bisa juga JSON atau model terpisah.
  customerNotes   String?   // Catatan dari pelanggan saat checkout

  items     OrderItem[] // Relasi ke OrderItem

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String  // Relasi ke Order
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade) // onDelete Cascade penting
  productId String  // Relasi ke Product
  product   Product @relation(fields: [productId], references: [id])
  
  quantity  Int
  priceAtPurchase Decimal // Harga produk saat dibeli (penting jika harga produk bisa berubah)

  @@index([orderId])
  @@index([productId])
}