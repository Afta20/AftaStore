// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model untuk NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String?   

  createdAt      DateTime  @default(now()) 
  updatedAt      DateTime  @updatedAt     

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model untuk Produk
model Product {
  id              String    @id @default(cuid())
  title           String
  imagePreviews   String[]
  reviews         Int?
  price           Decimal
  discountedPrice Decimal?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relasi ke Kategori
  // Setiap produk akan memiliki satu kategori (opsional, jika categoryId bisa null)
  // Jika kamu ingin produk WAJIB punya kategori, hilangkan tanda '?' pada categoryId dan Category
  categoryId      String?   // Field untuk menyimpan ID kategori
  category        Category? @relation(fields: [categoryId], references: [id])

  // Jika ada relasi ke User (Penjual)
  // sellerId   String?
  // seller     User?     @relation(fields: [sellerId], references: [id])

  @@index([categoryId]) // Tambahkan index untuk performa query berdasarkan kategori
  // @@index([sellerId])
}

// Model untuk Kategori Produk
model Category {
  id        String    @id @default(cuid())
  name      String    @unique // Nama kategori harus unik
  // Deskripsi kategori, jika perlu
  // description String?

  products  Product[] // Setiap kategori bisa memiliki banyak produk
}